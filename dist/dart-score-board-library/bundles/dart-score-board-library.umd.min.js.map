{"version":3,"sources":["ng://dart-score-board-library/lib/dart-score-board-library.service.ts","ng://dart-score-board-library/lib/dart-board-panel/translation/de.ts","ng://dart-score-board-library/lib/dart-board-panel/translation/en.ts","ng://dart-score-board-library/lib/dart-board-panel/translation/translation-provider.ts","ng://dart-score-board-library/lib/dart-score-board-library.component.ts","node_modules/tslib/tslib.es6.js","ng://dart-score-board-library/lib/dart-board-panel/classes/leg-data.ts","ng://dart-score-board-library/lib/dart-board-panel/classes/player-data.ts","ng://dart-score-board-library/lib/dart-board-panel/export-import-data-panel/export-import-data-panel.component.ts","ng://dart-score-board-library/lib/dart-board-panel/classes/score-entry.ts","ng://dart-score-board-library/lib/dart-board-panel/classes/game-modes.ts","ng://dart-score-board-library/lib/dart-board-panel/classes/score-validator.ts","ng://dart-score-board-library/lib/dart-board-panel/services/score.service.ts","ng://dart-score-board-library/lib/dart-board-panel/game-panel/game-panel.component.ts","ng://dart-score-board-library/lib/dart-board-panel/setup-panel/setup-panel.component.ts","ng://dart-score-board-library/lib/dart-board-panel/score-panel/score-panel.component.ts","ng://dart-score-board-library/lib/dart-board-panel/dart-board/dart-board.component.ts","ng://dart-score-board-library/lib/dart-board-panel/classes/dart-game-data.ts","ng://dart-score-board-library/lib/dart-board-panel/classes/game-setttings.ts","ng://dart-score-board-library/lib/dart-board-panel/dart-board-panel.component.ts","ng://dart-score-board-library/lib/dart-score-board-library.module.ts"],"names":["DartScoreBoardLibraryService","Injectable","args","providedIn","De","translation","page.dartScoreBoard.setup.title","page.dartScoreBoard.setup.gameMode","page.dartScoreBoard.setup.requiredScore","page.dartScoreBoard.setup.player.add","page.dartScoreBoard.setup.player","page.dartScoreBoard.setup.playerList","page.dartScoreBoard.setup.throwInput","page.dartScoreBoard.setup.throwInput.hint","page.dartScoreBoard.setup.throwInput.resetThrow","page.dartScoreBoard.setup.playerLis.hint","page.dartScoreBoard.setup.configure.players","page.dartScoreBoard.setup.player.add.placeholder","page.dartScoreBoard.setup.player.order.title","page.dartScoreBoard.setup.player.add.title","page.dartScoreBoard.setup.players.notFound","page.dartScoreBoard.setup.startGame","page.dartScoreBoard.setup.startNewRound","page.dartScoreBoard.setup.gameInProgress.hint","page.dartScoreBoard.setup.gameInProgress.cancelQuestion","page.dartScoreBoard.setup.cancelGame.hint","page.dartScoreBoard.setup.cancelGame.confirm","page.dartScoreBoard.setup.cancelGame.cancel","page.dartScoreBoard.setup.playerExists.hint","page.dartScoreBoard.game.export","page.dartScoreBoard.game.import","page.dartScoreBoard.score.numberOfDarts","page.dartScoreBoard.score.details","page.dartScoreBoard.score.details.stats","page.dartScoreBoard.score.details.throws","page.dartScoreBoard.score.details.average","page.dartScoreBoard.score.details.dartAverage","page.dartScoreBoard.setup.settings.customized","page.dartScoreBoard.setup.gameMode.DOUBLE_IN","page.dartScoreBoard.setup.gameMode.DOUBLE_OUT","page.dartScoreBoard.setup.gameMode.DOUBLE_IN_AND_OUT","page.dartScoreBoard.setup.gameMode.TRIPPLE_IN","page.dartScoreBoard.setup.gameMode.TRIPPLE_OUT","page.dartScoreBoard.setup.gameMode.TRIPPLE_IN_AND_OUT","page.dartScoreBoard.setup.gameMode.FREE_GAME","page.dartScoreBoard.game.finished","page.dartScoreBoard.game.winner","En","TranslationProvider","setupTranslationProvider","translate","defaultLocale","setTranslation","setDefaultLang","DartScoreBoardLibraryComponent","this","prototype","ngOnInit","translationSetup","ngOnChanges","changes","locale","Component","selector","template","TranslateService","Input","__values","o","m","Symbol","iterator","i","call","next","length","value","done","LegData","scores","PlayerData","currentLeg","ExportImportDataPanelComponent","saveGame","a","document","createElement","objectString","JSON","stringify","dartGameData","settings","currentPlayerMapKeys","currentActivePlayer","legFinished","isFirst","_b","tslib_1.__values","Array","from","gameData","keys","_c","key","line","get","setAttribute","encodeURIComponent","Date","getTime","click","loadGame","importGameButton","nativeElement","fileLoaded","file","_this","fileReader","FileReader","onload","data","parse","Map","throwsDone","_d","gameDataObject","gameEntry","_e","_f","score","push","set","readAsText","target","files","ViewChild","ScoreEntry","FREE_GAME","DOUBLE_IN","DOUBLE_OUT","DOUBLE_IN_AND_OUT","TRIPPLE_IN","TRIPPLE_OUT","TRIPPLE_IN_AND_OUT","VALID","SINGLE_INVALID","SET_INVALID","ScoreService","getPendingScores","index","requiredScore","total","isValid","isScoreValid","allScores","currentScore","gameMode","cummulatedScores","isFirstValidEntry","GameModes","indexOf","type","ScoreValidator","findIndex","s","GamePanelComponent","scoreService","scoreEntered","event","currentData","scoreValid","invalidateSet","finishedTime","totalThrowNumberInLeg","selectNextPlayer","scoreReverted","selectPreviousNotFinishedPlayer","checkIfFinished","toDeletedRows","splice","startNewGame","playerMap","firstPlayerAssigned","players","player","isGameActive","isPlayerActive","getPlayerObject","dartCount","name","getFirstFinisher","finisherArray","finishTime","undefined","firstFinisher","finisherArray_1","finisherArray_1_1","finisher","numberOfThrowsDone","throwsLeftCount","dummyScore","field","iteration","indexOfActivePlayer","newPlayerScores","SetupPanelComponent","gameStarted","EventEmitter","newPlayerName","showGameCancelWarning","isCustomizedRequiredScore","gameSettings","requiredScoreModel","getGameModes","modes","allModes","Object","valueOf","slice","mode","parseInt","getGameModeValue","getConvertedRequiredScore","setRequiredScore","setGameMode","doesPlayerExists","trim","addNewPlayer","removePlayer","isGameReady","startGame","emit","getGameCancelWarningClass","cancelGame","drop","moveItemInArray","previousIndex","currentIndex","Output","ScorePanelComponent","displayDetails","isActive","setTimeout","scrollToScoreBottom","legData","getScoreDisplay","get3DartAverage","numberOfCompleteSets","Math","floor","getSingleDartAverage","triggerDisplayDetails","scoreEntryPanel","scrollTop","scrollHeight","DartBoardComponent","clickedId","id","scoreObject","revertScore","getFillColor","elementId","defaultColor","DartGameData","GameSettings","DartBoardPanelComponent","gamePanel","DartScoreBoardLibraryModule","forRoot","ngModule","providers","NgModule","declarations","imports","BrowserModule","FormsModule","CommonModule","AngularSvgIconModule","HttpClientModule","DragDropModule","TranslateModule","exports"],"mappings":"swBAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAC,EAAA,WAAA,SAAAA,KAoDA,OAnDgBA,EAAAC,YAAd,WACE,MAAO,CAELC,kCAAmC,mBACnCC,qCAAsC,aACtCC,0CAA2C,+BAC3CC,uCAAwC,aACxCC,mCAAoC,UACpCC,uCAAwC,eACxCC,uCAAwC,qBACxCC,4CAA6C,wJAC7CC,kDAAmD,2BACnDC,2CAA4C,sGAC5CC,8CAA+C,oBAC/CC,mDAAoD,WACpDC,+CAAgD,4BAChDC,6CAA8C,qBAC9CC,6CAA8C,iCAC9CC,sCAAuC,iBACvCC,0CAA2C,sBAC3CC,gDAAiD,iGACjDC,0DAA2D,mBAC3DC,4CAA6C,gEAC7CC,+CAAgD,gBAChDC,8CAA+C,mBAC/CC,8CAA+C,0CAC/CC,kCAAmC,uBACnCC,kCAAmC,mBACnCC,0CAA2C,WAC3CC,oCAAqC,UACrCC,0CAA2C,uBAC3CC,2CAA4C,QAC5CC,4CAA6C,uBAC7CC,gDAAiD,wBAEjDC,gDAAiD,YAEjDC,+CAAgD,cAChDC,gDAAiD,cACjDC,uDAAwD,uBACxDC,gDAAiD,gBACjDC,iDAAkD,gBAClDC,wDAAyD,yBACzDC,+CAAgD,eAIhDC,oCAAqC,yGACrCC,kCAAmC,wJAGzC1C,EApDA,GCAA2C,EAAA,WAAA,SAAAA,KAkDA,OAjDgBA,EAAA1C,YAAd,WACE,MAAO,CAELC,kCAAmC,gBACnCC,qCAAsC,YACtCC,0CAA2C,0BAC3CC,uCAAwC,MACxCC,mCAAoC,SACpCC,uCAAwC,cACxCC,uCAAwC,cACxCC,4CAA6C,4FAC7CC,kDAAmD,oBACnDC,2CAA4C,6FAC5CC,8CAA+C,oBAC/CC,mDAAoD,WACpDC,+CAAgD,sBAChDC,6CAA8C,aAC9CC,6CAA8C,sBAC9CC,sCAAuC,aACvCC,0CAA2C,mBAC3CC,gDAAiD,yFACjDC,0DAA2D,eAC3DC,4CAA6C,4CAC7CC,+CAAgD,SAChDC,8CAA+C,WAC/CC,8CAA+C,6BAC/CC,kCAAmC,YACnCC,kCAAmC,YACnCC,0CAA2C,WAC3CC,oCAAqC,UACrCC,0CAA2C,mBAC3CC,2CAA4C,SAC5CC,4CAA6C,kBAC7CC,gDAAiD,eAEjDC,gDAAiD,aAEjDC,+CAAgD,YAChDC,gDAAiD,aACjDC,uDAAwD,oBACxDC,gDAAiD,aACjDC,iDAAkD,cAClDC,wDAAyD,qBACzDC,+CAAgD,YAEhDC,oCAAqC,0FACrCC,kCAAmC,0HAGzCC,EAlDA,GCIAC,EAAA,WAAA,SAAAA,KAUA,OATgBA,EAAAC,yBAAd,SAAuCC,EAA6BC,GAClED,EAAUE,eAAe,KAAMhD,EAAGC,eAAe,GACjD6C,EAAUE,eAAe,KAAML,EAAG1C,eAAe,GAC7C8C,EACFD,EAAUG,eAAeF,GAEzBD,EAAUG,eAAe,OAG/BL,EAVA,GCJAM,EAAA,WAgBE,SAAAA,EAAoBJ,GAAAK,KAAAL,UAAAA,EActB,OAZEI,EAAAE,UAAAC,SAAA,WACEF,KAAKG,oBAGPJ,EAAAE,UAAAG,YAAA,SAAYC,GACVL,KAAKG,oBAGCJ,EAAAE,UAAAE,iBAAR,WACEV,EAAoBC,yBAAyBM,KAAKL,UAAWK,KAAKM,6BAvBrEC,EAAAA,UAAS5D,KAAA,CAAC,CACT6D,SAAU,+BACVC,SAAU,uGALJC,EAAAA,oDAYLC,EAAAA,SAiBHZ,EA9BA,GCcA,SA4FgBa,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKL,GACd,CACHM,KAAM,WAEF,OADIN,GAAKI,GAAKJ,EAAEO,SAAQP,OAAI,GACrB,CAAEQ,MAAOR,GAAKA,EAAEI,KAAMK,MAAOT,KC9GhD,IAAAU,EAAA,SAAAA,IACSvB,KAAAwB,OAA4B,ICDrCC,EAGE,SAAAA,IACEzB,KAAK0B,WAAa,IAAIH,gBCYxB,SAAAI,KA+DF,OA7DEA,EAAA1B,UAAAC,SAAA,aAGOyB,EAAA1B,UAAA2B,SAAP,mBACQC,EAAIC,SAASC,cAAc,KAC7BC,EAAe,IACnBA,GAAgB,cAAgBC,KAAKC,UAAUlC,KAAKmC,aAAaC,UAAY,IAC7EJ,GAAgB,2BAA6BC,KAAKC,UAAUlC,KAAKmC,aAAaE,sBAAwB,IACtGL,GAAgB,0BAA4BC,KAAKC,UAAUlC,KAAKmC,aAAaG,qBAAuB,IACpGN,GAAgB,kBAAoBC,KAAKC,UAAUlC,KAAKmC,aAAaI,aAAe,IACpFP,GAAgB,oBACZQ,GAAU,MACd,IAAkB,IAAAC,EAAAC,EAAAC,MAAMC,KAAK5C,KAAKmC,aAAaU,SAASC,SAAOC,EAAAN,EAAAtB,QAAA4B,EAAAzB,KAAAyB,EAAAN,EAAAtB,OAAE,CAA5D,IAAM6B,EAAGD,EAAA1B,MACPmB,EAGHA,GAAU,EAFVR,GAAgB,QAIZiB,EAAOhB,KAAKC,UAAUlC,KAAKmC,aAAaU,SAASK,IAAIF,IAC3DhB,GAAgB,YAAcgB,EAAM,KACpChB,GAAgB,YAAciB,EAAO,yGAEvCjB,GAAgB,KAChBH,EAAEsB,aAAa,OAAQ,iCAAmCC,mBAAmBpB,IAC7EH,EAAEsB,aAAa,WAAY,cAAe,IAAIE,MAAOC,UAAY,SACjEzB,EAAE0B,SAGG5B,EAAA1B,UAAAuD,SAAP,WACExD,KAAKyD,iBAAiBC,cAAcH,SAG/B5B,EAAA1B,UAAA0D,WAAP,SAAkBC,GAAlB,IAAAC,EAAA7D,KACQ8D,EAAa,IAAIC,WACvBD,EAAWE,OAAM,uBACTC,EAAOH,EAAiB,OACxB1B,EAAWH,KAAKiC,MAAMD,GAAM7B,SAC5BE,EAAsBL,KAAKiC,MAAMD,GAAM3B,oBACvCD,EAAuBJ,KAAKiC,MAAMD,GAAM5B,qBACxCE,EAAcN,KAAKiC,MAAMD,GAAM1B,YAC/BM,EAAW,IAAIsB,IACjBC,EAAa,MACjB,IAA6B,IAAArB,EAAAL,EAAAT,KAAKiC,MAAMD,GAAMpB,UAAQwB,EAAAtB,EAAA5B,QAAAkD,EAAA/C,KAAA+C,EAAAtB,EAAA5B,OAAE,CAAnD,IAAMmD,EAAcD,EAAAhD,MACjBkD,EAAY,IAAI9C,EACtB8C,EAAU7C,WAAWF,OAAS,OAC9B,IAAoB,IAAAgD,EAAA9B,EAAA4B,EAAejD,MAAMK,WAAWF,QAAMiD,EAAAD,EAAArD,QAAAsD,EAAAnD,KAAAmD,EAAAD,EAAArD,OAAE,CAAvD,IAAMuD,EAAKD,EAAApD,MACdkD,EAAU7C,WAAWF,OAAOmD,KAAKD,wGAEnCN,GAAcG,EAAU7C,WAAWF,OAAOJ,OAC1CyB,EAAS+B,IAAIN,EAAetB,IAAKsB,EAAejD,4GAElDwC,EAAK1B,aAAaiC,WAAaA,EAC/BP,EAAK1B,aAAaG,oBAAsBA,EACxCuB,EAAK1B,aAAaI,YAA8B,SAAhBA,EAChCsB,EAAK1B,aAAaE,qBAAuBA,EACzCwB,EAAK1B,aAAaU,SAAQ,EAC1BgB,EAAK1B,aAAaC,SAAQ,GAE5B0B,EAAWe,WAAWjB,EAAKkB,OAAOC,MAAM,yBAzE3CxE,EAAAA,UAAS5D,KAAA,CAAC,CACT6D,SAAU,+BACVC,SAAA,4xBAKCuE,EAAAA,UAASrI,KAAA,CAAC,wCAGVgE,EAAAA,SAkEHgB,KCjFAsD,EAAA,SAAAA,SCCEC,UAAA,EACAC,UAAA,EACAC,WAAA,EACAC,kBAAA,EACAC,WAAA,EACAC,YAAA,EACAC,mBAAA,iPCNAC,MAAA,EACAC,eAAA,EACAC,YAAA,0FCHF,IAAAC,EAAA,WAQE,SAAAA,KAyEF,OAvESA,EAAA3F,UAAA4F,iBAAP,SAAwBC,EAAetE,EAAsBuE,OACvDC,EAAQD,EACRD,EAAQtE,EAAOJ,OAAS,IAC1B0E,EAAQtE,EAAOJ,OAAS,GAE1B,IAAK,IAAIH,EAAI,EAAGA,GAAK6E,EAAO7E,IACtBO,EAAOP,GAAGgF,UACZD,GAAgBxE,EAAOP,GAAG+E,OAG9B,OAAOA,GAGFJ,EAAA3F,UAAAiG,aAAP,SAAoBC,EAAyBC,EAA0BC,EAAqBN,OACtFO,EAAmBtG,KAAK6F,iBAAiBM,EAAU/E,OAAS,EAAG+E,EAAWJ,GAC9EO,GAAsCF,EAAaJ,UAE7CO,EAAoBvG,KAAKuG,kBAAkBJ,GACjD,OAA4E,EAAxE,CAACK,EAAUrB,UAAWqB,EAAUnB,mBAAmBoB,QAAQJ,IAAkBE,EACrD,IAAtBH,EAAaM,MAAkC,GAApBJ,EACL,GAApBA,EACKK,EAAelB,MAEjBkB,EAAehB,YAEjBgB,EAAejB,gBAEsD,EAA1E,CAACc,EAAUlB,WAAYkB,EAAUhB,oBAAoBiB,QAAQJ,IAAmBE,EACxD,IAAtBH,EAAaM,KACS,GAApBJ,EACKK,EAAelB,MAEjBkB,EAAehB,YAEjBgB,EAAejB,eAGA,GAApBY,EACKK,EAAelB,MAGA,GAApBa,IAAkG,EAAzE,CAACE,EAAUpB,WAAYoB,EAAUnB,mBAAmBoB,QAAQJ,GAChFM,EAAelB,MAGA,GAApBa,IAA+G,EAAtF,CAACE,EAAUrB,UAAWqB,EAAUlB,WAAYkB,EAAUtB,WAAWuB,QAAQJ,GAC7FM,EAAelB,MAGC,IAArBa,GAC2E,EAAzE,CAACE,EAAUpB,WAAYoB,EAAUnB,mBAAmBoB,QAAQJ,GACpC,IAAtBD,EAAaM,KACRC,EAAelB,MAEjBkB,EAAehB,aAEuD,EAA3E,CAACa,EAAUjB,YAAaiB,EAAUhB,oBAAoBiB,QAAQJ,GACtC,IAAtBD,EAAaM,KACRC,EAAelB,MAEjBkB,EAAehB,YAEjBgB,EAAelB,MAGjBkB,EAAehB,aAGjBC,EAAA3F,UAAAsG,kBAAP,SAAyB/E,GACvB,OAAwD,IAAjDA,EAAOoF,UAAS,SAAEC,GAAM,OAAc,IAAdA,EAAEZ,+BA1EpCvJ,EAAAA,mDA4EDkJ,EAjFA,gBCmBE,SAAAkB,EAAoBC,GAAA/G,KAAA+G,aAAAA,EAmLtB,OAhLED,EAAA7G,UAAAC,SAAA,aAGO4G,EAAA7G,UAAA+G,aAAP,SAAoBC,GAClB,GAAIjH,KAAKmC,aAAaU,UAAY7C,KAAKmC,aAAaG,sBAAwBtC,KAAKmC,aAAaI,YAAa,KACnG2E,EAAclH,KAAKmC,aAAaU,SAASK,IAAIlD,KAAKmC,aAAaG,qBACrE,GAAI4E,EAAYxF,YAAcwF,EAAYxF,WAAWF,OAAQ,KACrD2F,EAAanH,KAAK+G,aAAab,aAAagB,EAAYxF,WAAWF,OAAQyF,EAAOjH,KAAKmC,aAAaC,SAAiB,SAAepC,KAAKmC,aAAaC,SAAS2D,eACrKkB,EAAMhB,QAAUkB,IAAeR,EAAelB,MAC9CyB,EAAYxF,WAAWF,OAAOmD,KAAKsC,GAC/BE,IAAeR,EAAehB,aAChC3F,KAAKoH,cAAcD,EAAYD,GAE6H,IAA1JlH,KAAK+G,aAAalB,iBAAiBqB,EAAYxF,WAAWF,OAAOJ,OAAS,EAAG8F,EAAYxF,WAAWF,OAAQxB,KAAKmC,aAAaC,SAAS2D,gBACzImB,EAAYxF,WAAW2F,cAAe,IAAIhE,MAAOC,UACjD4D,EAAYxF,WAAW4F,sBAAwBtH,KAAKmC,aAAaiC,WACjEpE,KAAKuH,oBAEDL,EAAYxF,WAAWF,OAAOJ,OAAS,GAAM,GAC/CpB,KAAKuH,mBAGTvH,KAAKmC,aAAaiC,YAAc,KAK/B0C,EAAA7G,UAAAuH,cAAP,WACE,GAAIxH,KAAKmC,aAAaU,UAAY7C,KAAKmC,aAAaG,oBAAqB,KACnE4E,EAAclH,KAAKmC,aAAaU,SAASK,IAAIlD,KAAKmC,aAAaG,qBACnE,GAAI4E,EAAYxF,YAAcwF,EAAYxF,WAAWF,OAAQ,CAEnC,GADA,EAAI0F,EAAYxF,WAAWF,OAAOJ,OAAS,GAEjEpB,KAAKyH,kCAEPzH,KAAK0H,gBAAgB,GAGrB,QADIC,EAAgB,EACX1G,GAFTiG,EAAclH,KAAKmC,aAAaU,SAASK,IAAIlD,KAAKmC,aAAaG,sBAEtCZ,WAAWF,OAAOJ,OAAS,EAAQ,GAALH,EAAQA,IAAK,CAGlE,GADA0G,GAAiB,EACE,IAFLT,EAAYxF,WAAWF,OAAOP,GAElCyF,KACR,MAGJQ,EAAYxF,WAAWF,OAAOoG,OAAOV,EAAYxF,WAAWF,OAAOJ,OAASuG,EAAeA,GAE3F3H,KAAKmC,aAAaiC,YAAc,KAK/B0C,EAAA7G,UAAA4H,aAAP,mBACE7H,KAAKmC,aAAaE,qBAAuB,OACnCyF,EAAY,IAAI3D,IAClB4D,GAAsB,MAC1B,IAAqB,IAAAtF,EAAAC,EAAA1C,KAAKmC,aAAaC,SAAS4F,SAAOjF,EAAAN,EAAAtB,QAAA4B,EAAAzB,KAAAyB,EAAAN,EAAAtB,OAAE,CAApD,IAAM8G,EAAMlF,EAAA1B,MACfyG,EAAUlD,IAAIqD,EAAQ,IAAIxG,GACrBsG,IACH/H,KAAKmC,aAAaG,oBAAsB2F,EACxCF,GAAsB,wGAG1B/H,KAAKmC,aAAaiC,WAAa,EAC/BpE,KAAKmC,aAAaU,SAAWiF,EAC7B9H,KAAKmC,aAAaI,aAAc,EAChCvC,KAAKmC,aAAaE,qBAAuBM,MAAMC,KAAKkF,EAAUhF,QAC9D9C,KAAKmC,aAAaC,SAAS8F,cAAe,GAGrCpB,EAAA7G,UAAAkI,eAAP,SAAsBF,GACpB,OAAIjI,KAAKmC,aAAaI,aAGfvC,KAAKmC,aAAaG,sBAAwB2F,GAG5CnB,EAAA7G,UAAAmI,gBAAP,eACQC,EAAY,EAAIrI,KAAKmC,aAAaU,SAASK,IAAIlD,KAAKmC,aAAaG,qBAAqBZ,WAAWF,OAAOJ,OAAS,EACvH,MAAO,CAACkH,KAAQtI,KAAKmC,aAAaG,oBAAqB+F,UAAaA,IAG/DvB,EAAA7G,UAAAsI,iBAAP,uBACQC,EAAgB,OACtB,IAAqB,IAAAzF,EAAAL,EAAA1C,KAAKmC,aAAaE,sBAAoBgC,EAAAtB,EAAA5B,QAAAkD,EAAA/C,KAAA+C,EAAAtB,EAAA5B,OAAE,CAAxD,IAAM8G,EAAM5D,EAAAhD,MACT6F,EAAclH,KAAKmC,aAAaU,SAASK,IAAI+E,GAC/Cf,EAAYxF,WAAW2F,cACzBmB,EAAc7D,KAAK,CAACsD,OAAUA,EAAQQ,WAAcvB,EAAYxF,WAAW2F,oHAG/E,GAA6B,IAAzBmB,EAAcpH,OAChB,OAAOsH,cAELC,EAAgBH,EAAc,OAClC,IAAuB,IAAAI,EAAAlG,EAAA8F,GAAaK,EAAAD,EAAAzH,QAAA0H,EAAAvH,KAAAuH,EAAAD,EAAAzH,OAAE,CAAjC,IAAM2H,EAAQD,EAAAxH,MACbyH,EAASL,WAAaE,EAAcF,aACtCE,EAAgBG,wGAGpB,OAAOH,EAAcV,QAGfnB,EAAA7G,UAAAmH,cAAR,SAAsBD,EAA4BD,OAC5C6B,EAAqB7B,EAAYxF,WAAWF,OAAOJ,OAAS,EACrC,IAAvB2H,IACFA,EAAqB,GAEvB,IAAK,IAAI9H,EAAIiG,EAAYxF,WAAWF,OAAOJ,OAAS,EAAGH,GAAKiG,EAAYxF,WAAWF,OAAOJ,OAAS2H,EAAoB9H,IACrHiG,EAAYxF,WAAWF,OAAOP,GAAGgF,SAAU,MAGvC+C,EAAkB,EAAID,EAC5B,IAAS9H,EAAI,EAAGA,EAAI+H,EAAiB/H,IAAK,KAClCgI,EAAa,IAAIhE,EACvBgE,EAAWhD,SAAU,EACrBgD,EAAWvC,KAAO,EAClBuC,EAAWjD,MAAQ,EACnBiD,EAAWC,MAAQ,EACnBhC,EAAYxF,WAAWF,OAAOmD,KAAKsE,KAI/BnC,EAAA7G,UAAAwH,gCAAR,SAAwC0B,GACjCA,EAGHA,GAAa,EAFbA,EAAY,MAIRC,EAAsBpJ,KAAKmC,aAAaC,SAAS4F,QAAQvB,QAAQzG,KAAKmC,aAAaG,qBAEvFtC,KAAKmC,aAAaG,oBADQ,IAAxB8G,EACsCpJ,KAAKmC,aAAaC,SAAS4F,QAAQhI,KAAKmC,aAAaC,SAAS4F,QAAQ5G,OAAS,GAE/EpB,KAAKmC,aAAaC,SAAS4F,QAAQoB,EAAsB,GAEnGpJ,KAAK0H,gBAAgByB,IAGfrC,EAAA7G,UAAAyH,gBAAR,SAAwByB,OAChBjC,EAAclH,KAAKmC,aAAaU,SAASK,IAAIlD,KAAKmC,aAAaG,qBACjE4E,EAAYxF,WAAW2F,eACrBrH,KAAKmC,aAAaiC,WAAa,IAAM8C,EAAYxF,WAAW4F,uBAC9DJ,EAAYxF,WAAW2F,aAAeqB,UACtCxB,EAAYxF,WAAW4F,sBAAwBoB,UAC/C1I,KAAKmC,aAAaI,aAAc,EAChCvC,KAAKmC,aAAaC,SAAS8F,cAAe,GAEtCiB,GAAanJ,KAAKmC,aAAaE,qBAAqBjB,QACtDpB,KAAKyH,gCAAgC0B,KAMrCrC,EAAA7G,UAAAsH,iBAAR,SAAyB4B,GAClBA,EAGHA,GAAa,EAFbA,EAAY,MAIRC,EAAsBpJ,KAAKmC,aAAaC,SAAS4F,QAAQvB,QAAQzG,KAAKmC,aAAaG,qBACrF8G,IAAwBpJ,KAAKmC,aAAaC,SAAS4F,QAAQ5G,OAAS,EACtEpB,KAAKmC,aAAaG,oBAAsBtC,KAAKmC,aAAaC,SAAS4F,QAAQ,GAE3EhI,KAAKmC,aAAaG,oBAAsBtC,KAAKmC,aAAaC,SAAS4F,QAAQoB,EAAsB,OAE7FC,EAAkBrJ,KAAKmC,aAAaU,SAASK,IAAIlD,KAAKmC,aAAaG,qBAAqBZ,WAAWF,OACyB,IAA9HxB,KAAK+G,aAAalB,iBAAiBwD,EAAgBjI,OAAS,EAAGiI,EAAiBrJ,KAAKmC,aAAaC,SAAS2D,iBACzGoD,GAAanJ,KAAKmC,aAAaE,qBAAqBjB,OACtDpB,KAAKuH,iBAAiB4B,IAEtBnJ,KAAKmC,aAAaI,aAAc,EAChCvC,KAAKmC,aAAaC,SAAS8F,cAAe,yBAxLjD3H,EAAAA,UAAS5D,KAAA,CAAC,CACT6D,SAAU,iBACVC,SAAA,2qFAPMmF,2CAYLjF,EAAAA,SAsLHmG,kBC/KE,SAAAwC,IAPOtJ,KAAAuJ,YAAc,IAAIC,EAAAA,aAIlBxJ,KAAAyJ,cAAgB,GAChBzJ,KAAA0J,uBAAwB,EAyGjC,OApGEJ,EAAArJ,UAAAC,SAAA,WACEF,KAAK2J,2BAA4B,EAC7B3J,KAAK4J,aAAa7D,gBACpB/F,KAAK6J,mBAAqB7J,KAAK4J,aAAa7D,gBAIzCuD,EAAArJ,UAAA6J,aAAP,mBACQC,EAAQ,GACRC,EAAWC,OAAOnH,KAAK0D,EAAU0D,eACvC,IAAmB,IAAAzH,EAAAC,EAAAsH,EAASG,MAAM,EAAGH,EAAS5I,OAAS,IAAE2B,EAAAN,EAAAtB,QAAA4B,EAAAzB,KAAAyB,EAAAN,EAAAtB,OAAE,CAAtD,IAAMiJ,EAAIrH,EAAA1B,MACb0I,EAAMpF,KAAK0F,SAASD,EAAM,0GAG5B,OAAOL,GAGFT,EAAArJ,UAAAqK,iBAAP,SAAwBtH,GACtB,OAAOwD,EAAU0D,UAAUlH,IAGtBsG,EAAArJ,UAAAsK,0BAAP,WACE,OAAIvK,KAAK2J,2BACC,EAEH3J,KAAK4J,aAAa7D,eAGpBuD,EAAArJ,UAAAuK,iBAAP,SAAwB9F,GAClB1E,KAAK4J,aAAa1B,eAGtBlI,KAAK4J,aAAa7D,cAAgBrB,EAClC1E,KAAK6J,mBAAqBnF,IAGrB4E,EAAArJ,UAAAwK,YAAP,SAAmBL,GACbpK,KAAK4J,aAAa1B,eAGtBlI,KAAK4J,aAAavD,SAAW+D,IAGxBd,EAAArJ,UAAAyK,iBAAP,WACE,OAAuE,EAAhE1K,KAAK4J,aAAa5B,QAAQvB,QAAQzG,KAAKyJ,cAAckB,SAGvDrB,EAAArJ,UAAA2K,aAAP,WACM5K,KAAK4J,aAAa1B,cAGY,KAA9BlI,KAAKyJ,cAAckB,QAAkB3K,KAAK0K,qBAC5C1K,KAAK4J,aAAa5B,QAAQrD,KAAK3E,KAAKyJ,eACpCzJ,KAAKyJ,cAAgB,KAIlBH,EAAArJ,UAAA4K,aAAP,SAAoBvC,GAClB,IAAItI,KAAK4J,aAAa1B,cAGlBI,GAAwB,KAAhBA,EAAKqC,OAAe,KACxB7E,EAAQ9F,KAAK4J,aAAa5B,QAAQvB,QAAQ6B,IACnC,EAATxC,GACF9F,KAAK4J,aAAa5B,QAAQJ,OAAO9B,EAAO,KAKvCwD,EAAArJ,UAAA6K,YAAP,WACE,OAAO9K,KAAK4J,cACwB,EAAlC5J,KAAK4J,aAAa7D,eACiB,EAAnC/F,KAAK4J,aAAa5B,QAAQ5G,SACI,EAA9BpB,KAAK4J,aAAavD,UAGfiD,EAAArJ,UAAA8K,UAAP,WACM/K,KAAK4J,aAAa1B,cAGlBlI,KAAK8K,eACP9K,KAAKuJ,YAAYyB,QAId1B,EAAArJ,UAAAgL,0BAAP,WACE,OAAOjL,KAAK0J,sBAAwB,kBAAoB,gBAGnDJ,EAAArJ,UAAAiL,WAAP,WACElL,KAAK0J,uBAAwB,EAC7B1J,KAAK4J,aAAa1B,cAAe,GAG5BoB,EAAArJ,UAAAkL,KAAP,SAAYlE,GACNjH,KAAK4J,aAAa1B,cAGtBkD,EAAAA,gBAAgBpL,KAAK4J,aAAa5B,QAASf,EAAMoE,cAAepE,EAAMqE,mCAvHzE/K,EAAAA,UAAS5D,KAAA,CAAC,CACT6D,SAAU,kBACVC,SAAA,ijOAKCE,EAAAA,2BAGA4K,EAAAA,UA+GHjC,KC9HAkC,EAAA,WA6BE,SAAAA,EAAoBzE,GAAA/G,KAAA+G,aAAAA,EAFb/G,KAAAyL,gBAA0B,EAyDnC,OApDED,EAAAvL,UAAAC,SAAA,WACEF,KAAKyL,eAAiBzL,KAAK0L,UAG7BF,EAAAvL,UAAAG,YAAA,SAAYC,GAAZ,IAAAwD,EAAA7D,KACMK,EAAQqL,UACVC,WAAU,WACR9H,EAAK4H,eAAiB5H,EAAK6H,SAC3B7H,EAAK+H,uBACJ,MAIAJ,EAAAvL,UAAA4F,iBAAP,SAAwBC,GACtB,OAAO9F,KAAK+G,aAAalB,iBAAiBC,EAAO9F,KAAK6L,QAAQrK,OAAQxB,KAAK+F,gBAGtEyF,EAAAvL,UAAA6L,gBAAP,SAAuBpH,GACrB,OAAIA,GAAS,EACJ,KAELA,EAAQ,GACH,IAAMA,EAERA,GAGF8G,EAAAvL,UAAA8L,gBAAP,eACQC,EAAuBC,KAAKC,MAAMlM,KAAK6L,QAAQrK,OAAOJ,OAAS,GACrE,GAAI4K,GAAwB,EAC1B,MAAO,WAEHtH,EAAQ1E,KAAK6F,iBAAwC,EAAvBmG,EAA2B,GAC/D,OAAQhM,KAAK+F,cAAgBrB,GAASsH,GAGjCR,EAAAvL,UAAAkM,qBAAP,WACE,GAAmC,IAA/BnM,KAAK6L,QAAQrK,OAAOJ,OACtB,MAAO,WAEHsD,EAAQ1E,KAAK6F,iBAAiB7F,KAAK6L,QAAQrK,OAAOJ,OAAS,GACjE,OAAQpB,KAAK+F,cAAgBrB,GAAU1E,KAAK6L,QAAQrK,OAAa,QAG5DgK,EAAAvL,UAAAmM,sBAAP,WACEpM,KAAKyL,gBAAkBzL,KAAKyL,eAC5BzL,KAAK4L,uBAGAJ,EAAAvL,UAAA2L,oBAAP,WACE5L,KAAKqM,gBAAgB3I,cAAc4I,UAAYtM,KAAKqM,gBAAgB3I,cAAc6I,kCA5ErFhM,EAAAA,UAAS5D,KAAA,CAAC,CACT6D,SAAU,kBACVC,SAAA,86JAJMmF,sCAQLjF,EAAAA,0BAGAA,EAAAA,6BAGAA,EAAAA,wBAGAA,EAAAA,+BAGAqE,EAAAA,UAASrI,KAAA,CAAC,sBA4Db6O,EApFA,GCAAgB,EAAA,WAqBE,SAAAA,IAVOxM,KAAAgH,aAAe,IAAIwC,EAAAA,aAGnBxJ,KAAAwH,cAAgB,IAAIgC,EAAAA,aAGpBxJ,KAAAoE,WAAa,EAEbpE,KAAAyM,UAAY/D,UA+BrB,OA3BE8D,EAAAvM,UAAAC,SAAA,aAGOsM,EAAAvM,UAAAyE,MAAP,SAAagC,EAAcwC,EAAejC,GAA1C,IAAApD,EAAA7D,KACEA,KAAKyM,UAAaxF,EAAY,OAASyF,GACvCf,WAAU,WACR9H,EAAK4I,UAAY/D,WAChB,SACGiE,EAAc,IAAI1H,EACxB0H,EAAYzD,MAAQA,EACpByD,EAAYjG,KAAOA,EACnBiG,EAAY3G,MAAQU,EAAOwC,EAC3ByD,EAAY1G,SAAU,EACtBjG,KAAKgH,aAAagE,KAAK2B,IAGlBH,EAAAvM,UAAA2M,YAAP,WACE5M,KAAKwH,cAAcwD,QAGdwB,EAAAvM,UAAA4M,aAAP,SAAoBC,EAAmBC,GACrC,OAAK/M,KAAKyM,WAAazM,KAAKyM,YAAcK,EAGnC,UAFEC,uBA1CZxM,EAAAA,UAAS5D,KAAA,CAAC,CACT6D,SAAU,iBACVC,SAAA,o7lCAKC8K,EAAAA,8BAGAA,EAAAA,2BAGA5K,EAAAA,SAkCH6L,EAlDA,GCGAQ,EAAA,SAAAA,MCDAC,EAAA,SAAAA,MCFAC,EAAA,WAyBE,SAAAA,EAAoBvN,GAAAK,KAAAL,UAAAA,EAmBtB,OAhBEuN,EAAAjN,UAAAC,SAAA,WACEF,KAAKmC,aAAe,IAAI6K,EACxBhN,KAAKmC,aAAaC,SAAW,IAAI6K,EACjCjN,KAAKmC,aAAaC,SAASiE,SAAWG,EAAUtB,UAChDlF,KAAKmC,aAAaC,SAAS2D,cAAgB,IAC3C/F,KAAKmC,aAAaC,SAAS4F,QAAU,GACrChI,KAAKmC,aAAaE,qBAAuB,GACzC5C,EAAoBC,yBAAyBM,KAAKL,UAAWK,KAAKM,SAGpE4M,EAAAjN,UAAAG,YAAA,SAAYC,KAGL6M,EAAAjN,UAAA4H,aAAP,WACE7H,KAAKmN,UAAUtF,oCAhClBtH,EAAAA,UAAS5D,KAAA,CAAC,CACT6D,SAAU,uBACVC,SAAA,uhBATMC,EAAAA,uDAcLsE,EAAAA,UAASrI,KAAA,CAAC,6BAGVgE,EAAAA,SAwBHuM,EA5CA,GCAAE,EAAA,WAiBA,SAAAA,KA6BA,OANSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAAC3H,yBA1BjB4H,EAAAA,SAAQ7Q,KAAA,CAAC,CACR8Q,aAAc,CACZ1N,EACAmN,EACAV,EACAhB,EACAlC,EACAxC,EACAnF,GAEF+L,QAAS,CACPC,EAAAA,cACAC,EAAAA,YACAC,EAAAA,aACAC,EAAAA,qBACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,gBAAgBZ,WAElBE,UAAW,CAAC3H,GACZsI,QAAS,CAACnO,OASZqN,EA9CA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DartScoreBoardLibraryService {\n\n  constructor() { }\n}\n","export class De {\r\n  public static translation() {\r\n    return {\r\n      // Translation Keys\r\n      'page.dartScoreBoard.setup.title': 'Spieleinstellung',\r\n      'page.dartScoreBoard.setup.gameMode': 'Spielmodus',\r\n      'page.dartScoreBoard.setup.requiredScore': 'Erforderliche Punkte pro Leg',\r\n      'page.dartScoreBoard.setup.player.add': 'hinzufÃ¼gen',\r\n      'page.dartScoreBoard.setup.player': 'Spieler',\r\n      'page.dartScoreBoard.setup.playerList': 'Spielerliste',\r\n      'page.dartScoreBoard.setup.throwInput': 'Eingabe des Wurfes',\r\n      'page.dartScoreBoard.setup.throwInput.hint': 'Klicken Sie auf das jeweilige Feld um den geworfenen Wert einzugeben.<br/> Klicken Sie auf den Ã¤uÃeren Kreis sollte die Scheibe verfehlt worden sein.',\r\n      'page.dartScoreBoard.setup.throwInput.resetThrow': 'Letzen Wurf zurÃ¼cksetzen',\r\n      'page.dartScoreBoard.setup.playerLis.hint': '<strong>{{name}}</strong> ist am Zug. <br/> Er darf noch <strong>{{dartCount}}</strong> mal werfen.',\r\n      'page.dartScoreBoard.setup.configure.players': 'Spielermanagement',\r\n      'page.dartScoreBoard.setup.player.add.placeholder': 'Name ...',\r\n      'page.dartScoreBoard.setup.player.order.title': 'Reihenfolge (Drag & Drop)',\r\n      'page.dartScoreBoard.setup.player.add.title': 'Spieler hinzufÃ¼gen',\r\n      'page.dartScoreBoard.setup.players.notFound': 'Noch keine Spieler hinzugefÃ¼gt',\r\n      'page.dartScoreBoard.setup.startGame': 'Spiel starten!',\r\n      'page.dartScoreBoard.setup.startNewRound': 'Neue Runde starten!',\r\n      'page.dartScoreBoard.setup.gameInProgress.hint': 'Derzeit wird ein Spiel ausgefÃ¼hrt! Ãnderungen an den Einstellungen sind deshalb nicht mÃ¶glich!',\r\n      'page.dartScoreBoard.setup.gameInProgress.cancelQuestion': 'Spiel abbrechen?',\r\n      'page.dartScoreBoard.setup.cancelGame.hint': 'Sind Sie sicher, dass Sie das laufende Spiel beenden mÃ¶chten?',\r\n      'page.dartScoreBoard.setup.cancelGame.confirm': 'Spiel beenden',\r\n      'page.dartScoreBoard.setup.cancelGame.cancel': 'Spiel fortsetzen',\r\n      'page.dartScoreBoard.setup.playerExists.hint': 'Dieser Spielername ist bereits vergeben',\r\n      'page.dartScoreBoard.game.export': 'Spielstand speichern',\r\n      'page.dartScoreBoard.game.import': 'Spielstand laden',\r\n      'page.dartScoreBoard.score.numberOfDarts': 'Dart Nr.',\r\n      'page.dartScoreBoard.score.details': 'Details',\r\n      'page.dartScoreBoard.score.details.stats': 'Statistiken des Lags',\r\n      'page.dartScoreBoard.score.details.throws': 'WÃ¼rfe',\r\n      'page.dartScoreBoard.score.details.average': '3 Darts Durchschnitt',\r\n      'page.dartScoreBoard.score.details.dartAverage': 'Durchschnitt pro Dart',\r\n\r\n      'page.dartScoreBoard.setup.settings.customized': 'Angepasst',\r\n\r\n      'page.dartScoreBoard.setup.gameMode.DOUBLE_IN': 'Doppel rein',\r\n      'page.dartScoreBoard.setup.gameMode.DOUBLE_OUT': 'Doppel raus',\r\n      'page.dartScoreBoard.setup.gameMode.DOUBLE_IN_AND_OUT': 'Doppel rein und raus',\r\n      'page.dartScoreBoard.setup.gameMode.TRIPPLE_IN': 'Dreifach rein',\r\n      'page.dartScoreBoard.setup.gameMode.TRIPPLE_OUT': 'Dreifach raus',\r\n      'page.dartScoreBoard.setup.gameMode.TRIPPLE_IN_AND_OUT': 'Dreifach rein und raus',\r\n      'page.dartScoreBoard.setup.gameMode.FREE_GAME': 'Freies Spiel',\r\n\r\n\r\n\r\n      'page.dartScoreBoard.game.finished': 'Herzlichen GlÃ¼ckwunsch <strong>\"{{player}}\"</strong>, du hast gewonnen!<br/> Eine neue Runde beginnen?',\r\n      'page.dartScoreBoard.game.winner': 'Das Leg wurde durch <strong>\"{{player}}\"</strong> gewonnen.<br/> Die Ã¼brigen Spieler kÃ¶nnen fortfahren oder es kann eine neue Runde begonnen werden',\r\n    };\r\n  }\r\n}\r\n","export class En {\r\n  public static translation() {\r\n    return {\r\n      // Translation Keys\r\n      'page.dartScoreBoard.setup.title': 'Game settings',\r\n      'page.dartScoreBoard.setup.gameMode': 'Game mode',\r\n      'page.dartScoreBoard.setup.requiredScore': 'Required points per leg',\r\n      'page.dartScoreBoard.setup.player.add': 'add',\r\n      'page.dartScoreBoard.setup.player': 'Player',\r\n      'page.dartScoreBoard.setup.playerList': 'Player list',\r\n      'page.dartScoreBoard.setup.throwInput': 'Throw input',\r\n      'page.dartScoreBoard.setup.throwInput.hint': 'Click on a specific field to submit a throw<br/> To enter a miss click on the outer ring.',\r\n      'page.dartScoreBoard.setup.throwInput.resetThrow': 'Revert last throw',\r\n      'page.dartScoreBoard.setup.playerLis.hint': '<strong>{{name}}</strong>\\'s turn. <br/> He has <strong>{{dartCount}}</strong> throws left.',\r\n      'page.dartScoreBoard.setup.configure.players': 'Player management',\r\n      'page.dartScoreBoard.setup.player.add.placeholder': 'Name ...',\r\n      'page.dartScoreBoard.setup.player.order.title': 'Order (Drag & Drop)',\r\n      'page.dartScoreBoard.setup.player.add.title': 'Add player',\r\n      'page.dartScoreBoard.setup.players.notFound': 'No player added yet',\r\n      'page.dartScoreBoard.setup.startGame': 'Start game',\r\n      'page.dartScoreBoard.setup.startNewRound': 'Start new round!',\r\n      'page.dartScoreBoard.setup.gameInProgress.hint': 'A game is running at this moment! In this time, changing the settings is not possible!',\r\n      'page.dartScoreBoard.setup.gameInProgress.cancelQuestion': 'Cancel game?',\r\n      'page.dartScoreBoard.setup.cancelGame.hint': 'Are you sure you want to cancel the game?',\r\n      'page.dartScoreBoard.setup.cancelGame.confirm': 'Cancel',\r\n      'page.dartScoreBoard.setup.cancelGame.cancel': 'Continue',\r\n      'page.dartScoreBoard.setup.playerExists.hint': 'This player exists already',\r\n      'page.dartScoreBoard.game.export': 'Save game',\r\n      'page.dartScoreBoard.game.import': 'Load game',\r\n      'page.dartScoreBoard.score.numberOfDarts': 'Dart no.',\r\n      'page.dartScoreBoard.score.details': 'Details',\r\n      'page.dartScoreBoard.score.details.stats': 'Stats of the lag',\r\n      'page.dartScoreBoard.score.details.throws': 'Throws',\r\n      'page.dartScoreBoard.score.details.average': '3 darts average',\r\n      'page.dartScoreBoard.score.details.dartAverage': 'Dart average',\r\n\r\n      'page.dartScoreBoard.setup.settings.customized': 'customized',\r\n\r\n      'page.dartScoreBoard.setup.gameMode.DOUBLE_IN': 'Double in',\r\n      'page.dartScoreBoard.setup.gameMode.DOUBLE_OUT': 'Double out',\r\n      'page.dartScoreBoard.setup.gameMode.DOUBLE_IN_AND_OUT': 'Double in and out',\r\n      'page.dartScoreBoard.setup.gameMode.TRIPPLE_IN': 'Tripple in',\r\n      'page.dartScoreBoard.setup.gameMode.TRIPPLE_OUT': 'Tripple out',\r\n      'page.dartScoreBoard.setup.gameMode.TRIPPLE_IN_AND_OUT': 'Tripple in and out',\r\n      'page.dartScoreBoard.setup.gameMode.FREE_GAME': 'Free game',\r\n\r\n      'page.dartScoreBoard.game.finished': 'Congratulations <strong>\"{{player}}\"</strong>, you won the round!<br/> Start a new one?',\r\n      'page.dartScoreBoard.game.winner': '<strong>\"{{player}}\"</strong> won the lag.<br/> The remaining players can finish the round or you can start a new one',\r\n    };\r\n  }\r\n}\r\n","import {TranslateService} from '@ngx-translate/core';\r\nimport {De} from './de';\r\nimport {En} from './en';\r\n\r\nexport class TranslationProvider {\r\n  public static setupTranslationProvider(translate: TranslateService, defaultLocale?: string) {\r\n    translate.setTranslation('de', De.translation(), true);\r\n    translate.setTranslation('en', En.translation(), true);\r\n    if (defaultLocale) {\r\n      translate.setDefaultLang(defaultLocale);\r\n    } else {\r\n      translate.setDefaultLang('de');\r\n    }\r\n  }\r\n}\r\n","import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {TranslationProvider} from './dart-board-panel/translation/translation-provider';\n\n@Component({\n  selector: 'lib-dart-score-board-library',\n  template: `\n    <app-dart-board-panel></app-dart-board-panel>\n  `,\n  styles: []\n})\nexport class DartScoreBoardLibraryComponent implements OnInit, OnChanges {\n\n  @Input()\n  public locale: string;\n\n  constructor(private translate: TranslateService) { }\n\n  ngOnInit() {\n    this.translationSetup();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.translationSetup();\n  }\n\n  private translationSetup() {\n    TranslationProvider.setupTranslationProvider(this.translate, this.locale);\n  }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {ScoreEntry} from './score-entry';\r\n\r\nexport class LegData {\r\n  public scores: Array<ScoreEntry> = [];\r\n  public finishedTime: number;\r\n  public totalThrowNumberInLeg: number;\r\n}\r\n","import {LegData} from './leg-data';\r\n\r\nexport class PlayerData {\r\n  public currentLeg: LegData;\r\n\r\n  constructor() {\r\n    this.currentLeg = new LegData();\r\n  }\r\n}\r\n","import {Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\nimport {DartGameData} from '../classes/dart-game-data';\nimport {GameSettings} from '../classes/game-setttings';\nimport {PlayerData} from '../classes/player-data';\n\n@Component({\n  selector: 'app-export-import-data-panel',\n  templateUrl: './export-import-data-panel.component.html',\n  styleUrls: ['./export-import-data-panel.component.css']\n})\nexport class ExportImportDataPanelComponent implements OnInit {\n\n  @ViewChild('loadGameButton')\n  public importGameButton: ElementRef;\n\n  @Input()\n  public dartGameData: DartGameData;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public saveGame() {\n    const a = document.createElement('a');\n    let objectString = '{';\n    objectString += '\"settings\":' + JSON.stringify(this.dartGameData.settings) + ',';\n    objectString += '\"currentPlayerMapKeys\": ' + JSON.stringify(this.dartGameData.currentPlayerMapKeys) + ',';\n    objectString += '\"currentActivePlayer\": ' + JSON.stringify(this.dartGameData.currentActivePlayer) + ',';\n    objectString += '\"legFinished\": ' + JSON.stringify(this.dartGameData.legFinished) + ',';\n    objectString += '\"gameData\": [';\n    let isFirst = true;\n    for (const key of Array.from(this.dartGameData.gameData.keys())) {\n      if (!isFirst) {\n        objectString += ',';\n      } else {\n        isFirst = false;\n      }\n      const line = JSON.stringify(this.dartGameData.gameData.get(key));\n      objectString += '{\"key\": \"' + key + '\",';\n      objectString += '\"value\": ' + line + '}';\n    }\n    objectString += ']}';\n    a.setAttribute('href', 'data:text/plain;charset=utf-u,' + encodeURIComponent(objectString));\n    a.setAttribute('download', 'game-data-' + new Date().getTime() + '.json');\n    a.click();\n  }\n\n  public loadGame() {\n    this.importGameButton.nativeElement.click();\n  }\n\n  public fileLoaded(file: any) {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      const data = fileReader.result as any;\n      const settings = JSON.parse(data).settings;\n      const currentActivePlayer = JSON.parse(data).currentActivePlayer;\n      const currentPlayerMapKeys = JSON.parse(data).currentPlayerMapKeys;\n      const legFinished = JSON.parse(data).legFinished;\n      const gameData = new Map<string, PlayerData>();\n      let throwsDone = 0;\n      for (const gameDataObject of JSON.parse(data).gameData) {\n        const gameEntry = new PlayerData();\n        gameEntry.currentLeg.scores = [];\n        for (const score of gameDataObject.value.currentLeg.scores) {\n          gameEntry.currentLeg.scores.push(score);\n        }\n        throwsDone += gameEntry.currentLeg.scores.length;\n        gameData.set(gameDataObject.key, gameDataObject.value);\n      }\n      this.dartGameData.throwsDone = throwsDone;\n      this.dartGameData.currentActivePlayer = currentActivePlayer;\n      this.dartGameData.legFinished = legFinished === 'true';\n      this.dartGameData.currentPlayerMapKeys = currentPlayerMapKeys;\n      this.dartGameData.gameData = gameData as Map<string, PlayerData>;\n      this.dartGameData.settings = settings as GameSettings;\n    };\n    fileReader.readAsText(file.target.files[0]);\n  }\n\n}\n","export class ScoreEntry {\r\n  public type: number;\r\n  public field: number;\r\n  public total: number;\r\n  public isValid: boolean;\r\n}\r\n","export enum GameModes {\r\n  FREE_GAME,\r\n  DOUBLE_IN,\r\n  DOUBLE_OUT,\r\n  DOUBLE_IN_AND_OUT,\r\n  TRIPPLE_IN,\r\n  TRIPPLE_OUT,\r\n  TRIPPLE_IN_AND_OUT\r\n}\r\n","export enum ScoreValidator {\r\n  VALID,\r\n  SINGLE_INVALID,\r\n  SET_INVALID\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {ScoreEntry} from '../classes/score-entry';\nimport {GameModes} from '../classes/game-modes';\nimport {ScoreValidator} from '../classes/score-validator';\n\n@Injectable()\nexport class ScoreService {\n\n  constructor() { }\n\n  public getPendingScores(index: number, scores: ScoreEntry[], requiredScore: number) {\n    let total = requiredScore;\n    if (index > scores.length - 1) {\n      index = scores.length - 1;\n    }\n    for (let i = 0; i <= index; i++) {\n      if (scores[i].isValid) {\n        total = total - scores[i].total;\n      }\n    }\n    return total;\n  }\n\n  public isScoreValid(allScores: ScoreEntry[], currentScore: ScoreEntry, gameMode: GameModes, requiredScore: number): ScoreValidator {\n    let cummulatedScores = this.getPendingScores(allScores.length - 1, allScores, requiredScore);\n    cummulatedScores = cummulatedScores - currentScore.total;\n\n    const isFirstValidEntry = this.isFirstValidEntry(allScores);\n    if ([GameModes.DOUBLE_IN, GameModes.DOUBLE_IN_AND_OUT].indexOf(gameMode) > -1 && isFirstValidEntry) {\n      if (currentScore.type === 2 && cummulatedScores >= 0) {\n        if (cummulatedScores >= 0) {\n          return ScoreValidator.VALID;\n        }\n        return ScoreValidator.SET_INVALID;\n      }\n      return ScoreValidator.SINGLE_INVALID;\n    }\n    if ([GameModes.TRIPPLE_IN, GameModes.TRIPPLE_IN_AND_OUT].indexOf(gameMode) > -1  && isFirstValidEntry) {\n      if (currentScore.type === 3) {\n        if (cummulatedScores >= 0) {\n          return ScoreValidator.VALID;\n        }\n        return ScoreValidator.SET_INVALID;\n      }\n      return ScoreValidator.SINGLE_INVALID;\n    }\n\n    if (cummulatedScores >= 3) {\n      return ScoreValidator.VALID;\n    }\n\n    if (cummulatedScores >= 2 && [GameModes.DOUBLE_OUT, GameModes.DOUBLE_IN_AND_OUT].indexOf(gameMode) > -1) {\n      return ScoreValidator.VALID;\n    }\n\n    if (cummulatedScores >= 1 && [GameModes.DOUBLE_IN, GameModes.TRIPPLE_IN, GameModes.FREE_GAME].indexOf(gameMode) > -1) {\n      return ScoreValidator.VALID;\n    }\n\n    if (cummulatedScores === 0) {\n      if ([GameModes.DOUBLE_OUT, GameModes.DOUBLE_IN_AND_OUT].indexOf(gameMode) > -1) {\n        if (currentScore.type === 2) {\n          return ScoreValidator.VALID;\n        }\n        return ScoreValidator.SET_INVALID;\n      }\n      if ([GameModes.TRIPPLE_OUT, GameModes.TRIPPLE_IN_AND_OUT].indexOf(gameMode) > -1) {\n        if (currentScore.type === 3) {\n          return ScoreValidator.VALID;\n        }\n        return ScoreValidator.SET_INVALID;\n      }\n      return ScoreValidator.VALID;\n    }\n\n    return ScoreValidator.SET_INVALID;\n  }\n\n  public isFirstValidEntry(scores: ScoreEntry[]) {\n    return scores.findIndex((s) => s.isValid === true) === -1;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ScoreEntry} from '../classes/score-entry';\nimport {DartGameData} from '../classes/dart-game-data';\nimport {PlayerData} from '../classes/player-data';\nimport {ScoreService} from '../services/score.service';\nimport {GameModes} from '../classes/game-modes';\nimport {ScoreValidator} from '../classes/score-validator';\nimport {unescape} from 'querystring';\n\n@Component({\n  selector: 'app-game-panel',\n  templateUrl: './game-panel.component.html',\n  styleUrls: ['./game-panel.component.css']\n})\nexport class GamePanelComponent implements OnInit {\n\n  @Input()\n  public dartGameData: DartGameData;\n\n  constructor(private scoreService: ScoreService) {\n  }\n\n  ngOnInit() {\n  }\n\n  public scoreEntered(event: ScoreEntry) {\n    if (this.dartGameData.gameData && this.dartGameData.currentActivePlayer && !this.dartGameData.legFinished) {\n      const currentData = this.dartGameData.gameData.get(this.dartGameData.currentActivePlayer);\n      if (currentData.currentLeg && currentData.currentLeg.scores) {\n        const scoreValid = this.scoreService.isScoreValid(currentData.currentLeg.scores, event, this.dartGameData.settings.gameMode as GameModes, this.dartGameData.settings.requiredScore);\n        event.isValid = scoreValid === ScoreValidator.VALID;\n        currentData.currentLeg.scores.push(event);\n        if (scoreValid === ScoreValidator.SET_INVALID) {\n          this.invalidateSet(scoreValid, currentData);\n        }\n        if (this.scoreService.getPendingScores(currentData.currentLeg.scores.length - 1, currentData.currentLeg.scores, this.dartGameData.settings.requiredScore) === 0) {\n          currentData.currentLeg.finishedTime = new Date().getTime();\n          currentData.currentLeg.totalThrowNumberInLeg = this.dartGameData.throwsDone;\n          this.selectNextPlayer();\n        } else {\n          if (currentData.currentLeg.scores.length % 3 === 0) {\n            this.selectNextPlayer();\n          }\n        }\n        this.dartGameData.throwsDone += 1;\n      }\n    }\n  }\n\n  public scoreReverted() {\n    if (this.dartGameData.gameData && this.dartGameData.currentActivePlayer) {\n      let currentData = this.dartGameData.gameData.get(this.dartGameData.currentActivePlayer);\n      if (currentData.currentLeg && currentData.currentLeg.scores) {\n        const throwsLeftCount = 3 - currentData.currentLeg.scores.length % 3;\n        if (throwsLeftCount === 3) {\n          this.selectPreviousNotFinishedPlayer();\n        }\n        this.checkIfFinished(1);\n        currentData = this.dartGameData.gameData.get(this.dartGameData.currentActivePlayer);\n        let toDeletedRows = 0;\n        for (let i = currentData.currentLeg.scores.length - 1; i >= 0; i--) {\n          const score = currentData.currentLeg.scores[i];\n          toDeletedRows += 1;\n          if (score.type !== 0) {\n            break;\n          }\n        }\n        currentData.currentLeg.scores.splice(currentData.currentLeg.scores.length - toDeletedRows, toDeletedRows);\n\n        this.dartGameData.throwsDone -= 1;\n      }\n    }\n  }\n\n  public startNewGame() {\n    this.dartGameData.currentPlayerMapKeys = [];\n    const playerMap = new Map<string, PlayerData>();\n    let firstPlayerAssigned = false;\n    for (const player of this.dartGameData.settings.players) {\n      playerMap.set(player, new PlayerData());\n      if (!firstPlayerAssigned) {\n        this.dartGameData.currentActivePlayer = player;\n        firstPlayerAssigned = true;\n      }\n    }\n    this.dartGameData.throwsDone = 0;\n    this.dartGameData.gameData = playerMap;\n    this.dartGameData.legFinished = false;\n    this.dartGameData.currentPlayerMapKeys = Array.from(playerMap.keys());\n    this.dartGameData.settings.isGameActive = true;\n  }\n\n  public isPlayerActive(player: string) {\n    if (this.dartGameData.legFinished) {\n      return false;\n    }\n    return this.dartGameData.currentActivePlayer === player;\n  }\n\n  public getPlayerObject() {\n    const dartCount = 3 - this.dartGameData.gameData.get(this.dartGameData.currentActivePlayer).currentLeg.scores.length % 3;\n    return {'name': this.dartGameData.currentActivePlayer, 'dartCount': dartCount};\n  }\n\n  public getFirstFinisher() {\n    const finisherArray = [];\n    for (const player of this.dartGameData.currentPlayerMapKeys) {\n      const currentData = this.dartGameData.gameData.get(player);\n      if (currentData.currentLeg.finishedTime) {\n        finisherArray.push({'player': player, 'finishTime': currentData.currentLeg.finishedTime});\n      }\n    }\n    if (finisherArray.length === 0) {\n      return undefined;\n    }\n    let firstFinisher = finisherArray[0];\n    for (const finisher of finisherArray) {\n      if (finisher.finishTime < firstFinisher.finishTime) {\n        firstFinisher = finisher;\n      }\n    }\n    return firstFinisher.player;\n  }\n\n  private invalidateSet(scoreValid: ScoreValidator, currentData: PlayerData | undefined) {\n    let numberOfThrowsDone = currentData.currentLeg.scores.length % 3;\n    if (numberOfThrowsDone === 0) {\n      numberOfThrowsDone = 3;\n    }\n    for (let i = currentData.currentLeg.scores.length - 1; i >= currentData.currentLeg.scores.length - numberOfThrowsDone; i--) {\n      currentData.currentLeg.scores[i].isValid = false;\n    }\n\n    const throwsLeftCount = 3 - numberOfThrowsDone;\n    for (let i = 0; i < throwsLeftCount; i++) {\n      const dummyScore = new ScoreEntry();\n      dummyScore.isValid = false;\n      dummyScore.type = 0;\n      dummyScore.total = 0;\n      dummyScore.field = 0;\n      currentData.currentLeg.scores.push(dummyScore);\n    }\n  }\n\n  private selectPreviousNotFinishedPlayer(iteration?: number) {\n    if (!iteration) {\n      iteration = 1;\n    } else {\n      iteration += 1;\n    }\n    const indexOfActivePlayer = this.dartGameData.settings.players.indexOf(this.dartGameData.currentActivePlayer);\n    if (indexOfActivePlayer === 0) {\n      this.dartGameData.currentActivePlayer = this.dartGameData.settings.players[this.dartGameData.settings.players.length - 1];\n    } else {\n      this.dartGameData.currentActivePlayer = this.dartGameData.settings.players[indexOfActivePlayer - 1];\n    }\n    this.checkIfFinished(iteration);\n  }\n\n  private checkIfFinished(iteration: number) {\n    const currentData = this.dartGameData.gameData.get(this.dartGameData.currentActivePlayer);\n    if (currentData.currentLeg.finishedTime) {\n      if (this.dartGameData.throwsDone - 1 === currentData.currentLeg.totalThrowNumberInLeg) {\n        currentData.currentLeg.finishedTime = undefined;\n        currentData.currentLeg.totalThrowNumberInLeg = undefined;\n        this.dartGameData.legFinished = false;\n        this.dartGameData.settings.isGameActive = true;\n      } else {\n        if (iteration <= this.dartGameData.currentPlayerMapKeys.length) {\n          this.selectPreviousNotFinishedPlayer(iteration);\n        }\n      }\n    }\n  }\n\n  private selectNextPlayer(iteration?: number) {\n    if (!iteration) {\n      iteration = 1;\n    } else {\n      iteration += 1;\n    }\n    const indexOfActivePlayer = this.dartGameData.settings.players.indexOf(this.dartGameData.currentActivePlayer);\n    if (indexOfActivePlayer === this.dartGameData.settings.players.length - 1) {\n      this.dartGameData.currentActivePlayer = this.dartGameData.settings.players[0];\n    } else {\n      this.dartGameData.currentActivePlayer = this.dartGameData.settings.players[indexOfActivePlayer + 1];\n    }\n    const newPlayerScores = this.dartGameData.gameData.get(this.dartGameData.currentActivePlayer).currentLeg.scores;\n    if (this.scoreService.getPendingScores(newPlayerScores.length - 1, newPlayerScores, this.dartGameData.settings.requiredScore) === 0) {\n      if (iteration <= this.dartGameData.currentPlayerMapKeys.length) {\n        this.selectNextPlayer(iteration);\n      } else {\n        this.dartGameData.legFinished = true;\n        this.dartGameData.settings.isGameActive = false;\n      }\n    }\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {GameSettings} from '../classes/game-setttings';\r\nimport {GameModes} from '../classes/game-modes';\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: 'app-setup-panel',\r\n  templateUrl: './setup-panel.component.html',\r\n  styleUrls: ['./setup-panel.component.css']\r\n})\r\nexport class SetupPanelComponent implements OnInit {\r\n\r\n  @Input()\r\n  public gameSettings: GameSettings;\r\n\r\n  @Output()\r\n  public gameStarted = new EventEmitter();\r\n\r\n  public isCustomizedRequiredScore: boolean;\r\n  public requiredScoreModel: number;\r\n  public newPlayerName = '';\r\n  public showGameCancelWarning = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isCustomizedRequiredScore = false;\r\n    if (this.gameSettings.requiredScore) {\r\n      this.requiredScoreModel = this.gameSettings.requiredScore;\r\n    }\r\n  }\r\n\r\n  public getGameModes() {\r\n    const modes = [];\r\n    const allModes = Object.keys(GameModes.valueOf());\r\n    for (const mode of allModes.slice(0, allModes.length / 2)) {\r\n      modes.push(parseInt(mode, 10));\r\n    }\r\n\r\n    return modes;\r\n  }\r\n\r\n  public getGameModeValue(key: number) {\r\n    return GameModes.valueOf()[key];\r\n  }\r\n\r\n  public getConvertedRequiredScore() {\r\n    if (this.isCustomizedRequiredScore) {\r\n      return -1;\r\n    }\r\n    return this.gameSettings.requiredScore;\r\n  }\r\n\r\n  public setRequiredScore(score: number) {\r\n    if (this.gameSettings.isGameActive) {\r\n      return;\r\n    }\r\n    this.gameSettings.requiredScore = score;\r\n    this.requiredScoreModel = score;\r\n  }\r\n\r\n  public setGameMode(mode: number) {\r\n    if (this.gameSettings.isGameActive) {\r\n      return;\r\n    }\r\n    this.gameSettings.gameMode = mode;\r\n  }\r\n\r\n  public doesPlayerExists() {\r\n    return this.gameSettings.players.indexOf(this.newPlayerName.trim()) > -1;\r\n  }\r\n\r\n  public addNewPlayer() {\r\n    if (this.gameSettings.isGameActive) {\r\n      return;\r\n    }\r\n    if (this.newPlayerName.trim() !== '' && !this.doesPlayerExists()) {\r\n      this.gameSettings.players.push(this.newPlayerName);\r\n      this.newPlayerName = '';\r\n    }\r\n  }\r\n\r\n  public removePlayer(name: string) {\r\n    if (this.gameSettings.isGameActive) {\r\n      return;\r\n    }\r\n    if (name && name.trim() !== '') {\r\n      const index = this.gameSettings.players.indexOf(name);\r\n      if (index > -1) {\r\n        this.gameSettings.players.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  public isGameReady() {\r\n    return this.gameSettings &&\r\n      this.gameSettings.requiredScore > 0 &&\r\n      this.gameSettings.players.length > 0 &&\r\n      this.gameSettings.gameMode > -1;\r\n  }\r\n\r\n  public startGame() {\r\n    if (this.gameSettings.isGameActive) {\r\n      return;\r\n    }\r\n    if (this.isGameReady()) {\r\n      this.gameStarted.emit();\r\n    }\r\n  }\r\n\r\n  public getGameCancelWarningClass() {\r\n    return this.showGameCancelWarning ? 'display-warning' : 'hide-warning';\r\n  }\r\n\r\n  public cancelGame() {\r\n    this.showGameCancelWarning = false;\r\n    this.gameSettings.isGameActive = false;\r\n  }\r\n\r\n  public drop(event: CdkDragDrop<string[]>) {\r\n    if (this.gameSettings.isGameActive) {\r\n      return;\r\n    }\r\n    moveItemInArray(this.gameSettings.players, event.previousIndex, event.currentIndex);\r\n  }\r\n}\r\n","import {Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {PlayerData} from '../classes/player-data';\nimport {LegData} from '../classes/leg-data';\nimport {ScoreEntry} from '../classes/score-entry';\nimport {ScoreService} from '../services/score.service';\n\n@Component({\n  selector: 'app-score-panel',\n  templateUrl: './score-panel.component.html',\n  styleUrls: ['./score-panel.component.css']\n})\nexport class ScorePanelComponent implements OnInit, OnChanges {\n  @Input()\n  public legData: LegData;\n\n  @Input()\n  public playerName: string;\n\n  @Input()\n  public requiredScore: number;\n\n  @Input()\n  public isActive: boolean;\n\n  @ViewChild('scoreEntryPanel')\n  public scoreEntryPanel: ElementRef;\n\n  public displayDetails: boolean = false;\n\n  constructor(private scoreService: ScoreService) {\n  }\n\n  ngOnInit() {\n    this.displayDetails = this.isActive;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.isActive) {\n      setTimeout(() => {\n        this.displayDetails = this.isActive;\n        this.scrollToScoreBottom();\n      }, 1000);\n    }\n  }\n\n  public getPendingScores(index: number) {\n    return this.scoreService.getPendingScores(index, this.legData.scores, this.requiredScore);\n  }\n\n  public getScoreDisplay(score: number) {\n    if (score <= 0) {\n      return '00';\n    }\n    if (score < 10) {\n      return '0' + score;\n    }\n    return score;\n  }\n\n  public get3DartAverage() {\n    const numberOfCompleteSets = Math.floor(this.legData.scores.length / 3);\n    if (numberOfCompleteSets <= 0) {\n      return '(--)';\n    }\n    const score = this.getPendingScores(numberOfCompleteSets * 3 - 1);\n    return (this.requiredScore - score) / numberOfCompleteSets;\n  }\n\n  public getSingleDartAverage() {\n    if (this.legData.scores.length === 0) {\n      return '(--)';\n    }\n    const score = this.getPendingScores(this.legData.scores.length - 1);\n    return (this.requiredScore - score) / (this.legData.scores.length);\n  }\n\n  public triggerDisplayDetails() {\n    this.displayDetails = !this.displayDetails;\n    this.scrollToScoreBottom();\n  }\n\n  public scrollToScoreBottom() {\n    this.scoreEntryPanel.nativeElement.scrollTop = this.scoreEntryPanel.nativeElement.scrollHeight;\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {ScoreEntry} from '../classes/score-entry';\r\n\r\n@Component({\r\n  selector: 'app-dart-board',\r\n  templateUrl: './dart-board.component.html',\r\n  styleUrls: ['./dart-board.component.css']\r\n})\r\nexport class DartBoardComponent implements OnInit {\r\n\r\n  @Output()\r\n  public scoreEntered = new EventEmitter();\r\n\r\n  @Output()\r\n  public scoreReverted = new EventEmitter();\r\n\r\n  @Input()\r\n  public throwsDone = 0;\r\n\r\n  public clickedId = undefined;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public score(type: number, field: number, event: MouseEvent) {\r\n    this.clickedId = (event.target as any).id;\r\n    setTimeout(() => {\r\n      this.clickedId = undefined;\r\n    }, 750);\r\n    const scoreObject = new ScoreEntry();\r\n    scoreObject.field = field;\r\n    scoreObject.type = type;\r\n    scoreObject.total = type * field;\r\n    scoreObject.isValid = true;\r\n    this.scoreEntered.emit(scoreObject);\r\n  }\r\n\r\n  public revertScore() {\r\n    this.scoreReverted.emit();\r\n  }\r\n\r\n  public getFillColor(elementId: string, defaultColor: string) {\r\n    if (!this.clickedId || this.clickedId !== elementId) Â {\r\n      return defaultColor;\r\n    }\r\n    return '#0009b7';\r\n  }\r\n\r\n}\r\n","import {GameSettings} from './game-setttings';\r\nimport {PlayerData} from './player-data';\r\n\r\nexport class DartGameData {\r\n  public settings: GameSettings;\r\n  public gameData: Map<string, PlayerData>;\r\n  public currentActivePlayer: string;\r\n  public currentPlayerMapKeys: string[];\r\n  public throwsDone: number;\r\n  public legFinished: boolean;\r\n}\r\n","import {GameModes} from './game-modes';\r\n\r\nexport class GameSettings {\r\n  public isGameActive: boolean;\r\n  public gameMode: number;\r\n  public requiredScore: number;\r\n  public players: Array<string>;\r\n}\r\n","import {ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\r\nimport {DartGameData} from './classes/dart-game-data';\r\nimport {GameSettings} from './classes/game-setttings';\r\nimport {TranslateService} from '@ngx-translate/core';\r\nimport {TranslationProvider} from './translation/translation-provider';\r\nimport {GameModes} from './classes/game-modes';\r\nimport {PlayerData} from './classes/player-data';\r\nimport {ScoreEntry} from './classes/score-entry';\r\nimport {GamePanelComponent} from './game-panel/game-panel.component';\r\n\r\n@Component({\r\n  selector: 'app-dart-board-panel',\r\n  templateUrl: './dart-board-panel.component.html',\r\n  styleUrls: ['./dart-board-panel.component.css']\r\n})\r\nexport class DartBoardPanelComponent implements OnInit, OnChanges {\r\n\r\n  @ViewChild('gamePanel')\r\n  public gamePanel: GamePanelComponent;\r\n\r\n  @Input()\r\n  public locale: string;\r\n\r\n  public dartGameData: DartGameData;\r\n\r\n  constructor(private translate: TranslateService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.dartGameData = new DartGameData();\r\n    this.dartGameData.settings = new GameSettings();\r\n    this.dartGameData.settings.gameMode = GameModes.FREE_GAME;\r\n    this.dartGameData.settings.requiredScore = 501;\r\n    this.dartGameData.settings.players = [];\r\n    this.dartGameData.currentPlayerMapKeys = [];\r\n    TranslationProvider.setupTranslationProvider(this.translate, this.locale);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n  }\r\n\r\n  public startNewGame() {\r\n    this.gamePanel.startNewGame();\r\n  }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport { DartScoreBoardLibraryComponent } from './dart-score-board-library.component';\nimport {FormsModule} from '@angular/forms';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {AngularSvgIconModule} from 'angular-svg-icon';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {ExportImportDataPanelComponent} from './dart-board-panel/export-import-data-panel/export-import-data-panel.component';\nimport {GamePanelComponent} from './dart-board-panel/game-panel/game-panel.component';\nimport {SetupPanelComponent} from './dart-board-panel/setup-panel/setup-panel.component';\nimport {ScorePanelComponent} from './dart-board-panel/score-panel/score-panel.component';\nimport {DartBoardComponent} from './dart-board-panel/dart-board/dart-board.component';\nimport {DartBoardPanelComponent} from './dart-board-panel/dart-board-panel.component';\nimport {ScoreService} from './dart-board-panel/services/score.service';\n\n@NgModule({\n  declarations: [\n    DartScoreBoardLibraryComponent,\n    DartBoardPanelComponent,\n    DartBoardComponent,\n    ScorePanelComponent,\n    SetupPanelComponent,\n    GamePanelComponent,\n    ExportImportDataPanelComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    CommonModule,\n    AngularSvgIconModule,\n    HttpClientModule,\n    DragDropModule,\n    TranslateModule.forRoot()\n  ],\n  providers: [ScoreService],\n  exports: [DartScoreBoardLibraryComponent]\n})\nexport class DartScoreBoardLibraryModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DartScoreBoardLibraryModule,\n      providers: [ScoreService]\n    };\n  }\n}\n"]}